# -*- coding: utf-8 -*-
"""GPT2 Clone.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k7l126uXkVwqFMDONqHeXiovro4ubW0c

# GPT2 Clone Notebook

# Step 1: Install dependencies
"""

!pip install -U datasets huggingface_hub fsspec

"""# Step 2: Import libraries

"""

import os
import numpy as np
import tiktoken
from datasets import load_dataset
from tqdm import tqdm
import torch
import torch.nn as nn
from torch.nn import functional as F
from dataclasses import dataclass
import math
import time
import inspect

"""# Step 3: Setup local directory and shard size

"""

local_dir = "edu_fineweb300M"
shard_size = int(1e8) # 100M tokens per shard
num_shards = 3
os.makedirs(local_dir, exist_ok=True)

"""# Step 4: Load dataset

"""

fw = load_dataset("HuggingFaceFW/fineweb-edu", name="sample-10BT", split="train", streaming=True)

"""# Step 5: Initialize tokenizer

"""

enc = tiktoken.get_encoding("gpt2")
eot = enc._special_tokens['<|endoftext|>']

def tokenize(doc):
    tokens = [eot]
    tokens.extend(enc.encode_ordinary(doc["text"]))
    return np.array(tokens, dtype=np.uint16)

def write_datafile(filename, tokens_np):
    np.save(filename, tokens_np)

"""# Step 6: Process and save shards

"""

shard_index = 0
all_tokens_np = np.empty((shard_size,), dtype=np.uint16)
token_count = 0
progress_bar = tqdm(total=shard_size, unit="tokens", desc=f"Shard {shard_index}")

for doc in fw:
    tokens = tokenize(doc)
    remaining_space = shard_size - token_count
    if len(tokens) <= remaining_space:
        all_tokens_np[token_count:token_count+len(tokens)] = tokens
        token_count += len(tokens)
        progress_bar.update(len(tokens))
    else:
        all_tokens_np[token_count:] = tokens[:remaining_space]
        progress_bar.update(remaining_space)
        filename = os.path.join(local_dir, f"edufineweb_train_{shard_index:06d}.npy")
        write_datafile(filename, all_tokens_np)

        shard_index += 1
        if shard_index >= num_shards:
            break

        all_tokens_np = np.empty((shard_size,), dtype=np.uint16)
        token_count = len(tokens) - remaining_space
        all_tokens_np[:token_count] = tokens[remaining_space:]
        progress_bar = tqdm(total=shard_size, unit="tokens", desc=f"Shard {shard_index}")

if shard_index < num_shards and token_count > 0:
    filename = os.path.join(local_dir, f"edufineweb_train_{shard_index:06d}.npy")
    write_datafile(filename, all_tokens_np[:token_count])
    print(f"ðŸ”¹ Final partial shard {shard_index} saved with {token_count} tokens.")

print("âœ… Done. Saved up to 3 shards (300 million tokens) in:", local_dir)

"""# Step 7: Define GPT2 Model

"""

@dataclass
class GPTConfig:
    block_size: int = 1024
    vocab_size: int = 50257
    n_layer: int = 12
    n_head: int = 12
    n_embd: int = 768

class CausalSelfAttention(nn.Module):
    def __init__(self, config):
        super().__init__()
        assert config.n_embd % config.n_head == 0
        self.c_attn = nn.Linear(config.n_embd, 3 * config.n_embd)
        self.c_proj = nn.Linear(config.n_embd, config.n_embd)
        self.c_proj.NANOGPT_SCALE_INIT = 1
        self.n_head = config.n_head
        self.n_embd = config.n_embd

    def forward(self, x):
        B, T, C = x.size()
        qkv = self.c_attn(x)
        q, k, v = qkv.split(self.n_embd, dim=2)
        k = k.view(B, T, self.n_head, C // self.n_head).transpose(1, 2)
        q = q.view(B, T, self.n_head, C // self.n_head).transpose(1, 2)
        v = v.view(B, T, self.n_head, C // self.n_head).transpose(1, 2)
        y = F.scaled_dot_product_attention(q, k, v, is_causal=True)
        y = y.transpose(1, 2).contiguous().view(B, T, C)
        return self.c_proj(y)

class MLP(nn.Module):
    def __init__(self, config):
        super().__init__()
        self.c_fc = nn.Linear(config.n_embd, 4 * config.n_embd)
        self.gelu = nn.GELU(approximate='tanh')
        self.c_proj = nn.Linear(4 * config.n_embd, config.n_embd)
        self.c_proj.NANOGPT_SCALE_INIT = 1

    def forward(self, x):
        return self.c_proj(self.gelu(self.c_fc(x)))

class Block(nn.Module):
    def __init__(self, config):
        super().__init__()
        self.ln_1 = nn.LayerNorm(config.n_embd)
        self.attn = CausalSelfAttention(config)
        self.ln_2 = nn.LayerNorm(config.n_embd)
        self.mlp = MLP(config)

    def forward(self, x):
        x = x + self.attn(self.ln_1(x))
        x = x + self.mlp(self.ln_2(x))
        return x

class GPT(nn.Module):
    def __init__(self, config):
        super().__init__()
        self.config = config
        self.transformer = nn.ModuleDict(dict(
            wte = nn.Embedding(config.vocab_size, config.n_embd),
            wpe = nn.Embedding(config.block_size, config.n_embd),
            h = nn.ModuleList([Block(config) for _ in range(config.n_layer)]),
            ln_f = nn.LayerNorm(config.n_embd),
        ))
        self.lm_head = nn.Linear(config.n_embd, config.vocab_size, bias=False)
        self.transformer.wte.weight = self.lm_head.weight
        self.apply(self._init_weights)
    def configure_optimizers(self, weight_decay, learning_rate, device_type):
        # start with all of the candidate parameters (that require grad)
        param_dict = {pn: p for pn, p in self.named_parameters()}
        param_dict = {pn: p for pn, p in param_dict.items() if p.requires_grad}
        # create optim groups. Any parameters that is 2D will be weight decayed, otherwise no.
        # i.e. all weight tensors in matmuls + embeddings decay, all biases and layernorms don't.
        decay_params = [p for n, p in param_dict.items() if p.dim() >= 2]
        nodecay_params = [p for n, p in param_dict.items() if p.dim() < 2]
        optim_groups = [
            {'params': decay_params, 'weight_decay': weight_decay},
            {'params': nodecay_params, 'weight_decay': 0.0}
        ]
        num_decay_params = sum(p.numel() for p in decay_params)
        num_nodecay_params = sum(p.numel() for p in nodecay_params)
        print(f"num decayed parameter tensors: {len(decay_params)}, with {num_decay_params:,} parameters")
        print(f"num non-decayed parameter tensors: {len(nodecay_params)}, with {num_nodecay_params:,} parameters")
        # Create AdamW optimizer and use the fused version if it is available
        fused_available = 'fused' in inspect.signature(torch.optim.AdamW).parameters
        use_fused = fused_available and device_type == "cuda"
        print(f"using fused AdamW: {use_fused}")
        optimizer = torch.optim.AdamW(optim_groups, lr=learning_rate, betas=(0.9, 0.95), eps=1e-8, fused=use_fused)
        return optimizer

    def _init_weights(self, module):
        if isinstance(module, nn.Linear):
            std = 0.02
            if hasattr(module, 'NANOGPT_SCALE_INIT'):
                std *= (2 * self.config.n_layer) ** -0.5
            torch.nn.init.normal_(module.weight, mean=0.0, std=std)
            if module.bias is not None:
                torch.nn.init.zeros_(module.bias)
        elif isinstance(module, nn.Embedding):
            torch.nn.init.normal_(module.weight, mean=0.0, std=0.02)

    def forward(self, idx, targets=None):
        B, T = idx.size()
        assert T <= self.config.block_size
        pos = torch.arange(0, T, dtype=torch.long, device=idx.device)
        pos_emb = self.transformer.wpe(pos)
        tok_emb = self.transformer.wte(idx)
        x = tok_emb + pos_emb
        for block in self.transformer.h:
            x = block(x)
        x = self.transformer.ln_f(x)
        logits = self.lm_head(x)
        loss = None
        if targets is not None:
            loss = F.cross_entropy(logits.view(-1, logits.size(-1)), targets.view(-1))
        return logits, loss

"""# Step 8: Final training setup

"""

torch.set_float32_matmul_precision("high")
device = "cuda" if torch.cuda.is_available() else "cpu"
model = GPT(GPTConfig(vocab_size=50304))
model.eval()
model.to(device)
model = torch.compile(model)

# Learning rate schedule parameters
warmup_steps = 2000
max_steps = 100_000
max_lr = 6e-4
min_lr = 6e-5

def get_lr(it):
    if it < warmup_steps:
        return max_lr * (it + 1) / warmup_steps
    if it > max_steps:
        return min_lr
    decay_ratio = (it - warmup_steps) / (max_steps - warmup_steps)
    coeff = 0.5 * (1.0 + math.cos(math.pi * decay_ratio))
    return min_lr + coeff * (max_lr - min_lr)

"""# Step 9: Training parameters

"""

total_batch_size = 524288  # tokens
B = 8                      # micro batch size
T = 1024                   # sequence length
assert total_batch_size % (B * T) == 0
grad_accum_steps = total_batch_size // (B * T)
print(f"Total batch size: {total_batch_size}, Gradient accumulation steps: {grad_accum_steps}")

"""# Dummy DataLoaderLite class

"""

class DataLoaderLite:
    def __init__(self, B, T, process_rank=0, num_processes=1, split='train'):
        self.B = B
        self.T = T
        self.idx = 0
        self.data = np.load(f"{local_dir}/edufineweb_train_000000.npy")  # Load first shard
        self.data = torch.from_numpy(self.data).long()

    def next_batch(self):
        if self.idx + self.B * self.T >= len(self.data):
            self.idx = 0
        x = self.data[self.idx:self.idx + self.B * self.T].view(self.B, self.T)
        y = self.data[self.idx + 1:self.idx + 1 + self.B * self.T].view(self.B, self.T)
        self.idx += self.B * self.T
        return x, y

"""# Step 10: Optimizer

"""

optimizer = model.configure_optimizers(weight_decay=0.1, learning_rate=max_lr, device_type=device)
train_loader = DataLoaderLite(B, T)

"""# Step 11: Training loop

"""

for step in range(max_steps):
    t0 = time.time()
    optimizer.zero_grad()
    loss_accum = 0.0
    for _ in range(grad_accum_steps):
        x, y = train_loader.next_batch()
        x, y = x.to(device), y.to(device)
        logits, loss = model(x, y)
        loss = loss / grad_accum_steps
        loss_accum += loss.item()
        loss.backward()
    norm = torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)
    lr = get_lr(step)
    for param_group in optimizer.param_groups:
        param_group['lr'] = lr
    optimizer.step()
    t1 = time.time()
    tokens_per_sec = (train_loader.B * train_loader.T * grad_accum_steps) / (t1 - t0)
    print(f"step {step:5d} | loss: {loss_accum:.4f} | grad_norm: {norm:.2f} | lr: {lr:.6f} | {tokens_per_sec:.0f} tok/s | {1000*(t1-t0):.2f}ms")

"""# Step 12: Save final model

"""

torch.save(model.state_dict(), os.path.join(local_dir, "gpt2_edu_final.pt"))
print("âœ… Training complete. Model saved.")